{"version":3,"file":"static/js/182.d50d6747.chunk.js","mappings":"4TACMA,EAAQ,mCAEdC,IAAAA,SAAAA,QADe,+BAGR,IAAMC,EAAmB,mCAAC,sGACTD,IAAAA,IAAA,sCAAyCD,IADhC,uBACtBG,EADsB,EACtBA,KADsB,kBAEtBA,GAFsB,2CAAD,qDAKnBC,EAAc,mCAAC,WAAMC,GAAN,yFACJJ,IAAAA,IAAA,iBAAoBI,EAApB,oBAAuCL,EAAvC,oBADI,uBACjBG,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAD,sDAKdG,EAAc,mCAAC,WAAMD,GAAN,yFACJJ,IAAAA,IAAA,iBAAoBI,EAApB,4BAA+CL,EAA/C,oBADI,uBACjBG,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAD,sDAKdI,EAAgB,mCAAC,WAAMF,GAAN,yFACNJ,IAAAA,IAAA,iBAAoBI,EAApB,4BAA+CL,EAA/C,oBADM,uBACnBG,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAD,sDAKhBK,EAAgB,mCAAC,WAAMC,GAAN,yFACRR,IAAAA,IAAA,gCAAmCD,EAAnC,sDAAwFS,IADhF,uBACpBN,EADoB,EACpBA,KADoB,kBAEnBA,GAFmB,2CAAD,uD,qDCzBtB,IAAMO,EAAU,WACnBC,OAAOC,SAAS,CACZC,IAAK,IACLC,KAAM,EACNC,SAAU,a,0LCFLC,EAASC,EAAAA,GAAAA,GAAD,uHAQRC,EAAeD,EAAAA,GAAAA,IAAD,mDAKdE,EAAWF,EAAAA,GAAAA,IAAD,uEAKVG,EAAWH,EAAAA,GAAAA,EAAD,yC,SCjBVI,EAAa,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAOC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,UAIpC,OAHAC,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,IACJ,UAACR,EAAD,YAAU,SAACG,EAAD,CAAYQ,IAAG,yCAAoCL,GAAUM,IAAKL,KACpF,UAACL,EAAD,YAAgB,SAACE,EAAD,UAAaG,KAC7B,UAACH,EAAD,yBAAwBI,YCPfK,EAASZ,EAAAA,GAAAA,GAAD,wH,UCuCrB,EAjCW,WACP,OAA0Ba,EAAAA,EAAAA,UAAS,IAAnC,eAAMC,EAAN,KAAcC,EAAd,KAEK3B,GAAS4B,EAAAA,EAAAA,MAAT5B,QAiBL,OAfA6B,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,mCAAC,WAAM9B,GAAN,kGAEU+B,EAAAA,GAA6B/B,GAFvC,gBAEHgC,EAFG,EAEHA,KACPL,GAAW,OAAIK,IAHL,iDAMHC,EAAAA,EAAAA,MANG,kCAOH,WAAKN,EAAW,OAPb,yDAAD,sDASbG,EAAQ9B,KAEN,KAEF6B,EAAAA,EAAAA,YAAU,kBAAIxB,EAAAA,EAAAA,OAAY,CAACqB,KACxB,SAACF,EAAD,UACFE,EAAQQ,KAAI,SAAAC,GACT,IAAMC,EAAgCD,EAAhCC,aAAalB,EAAmBiB,EAAnBjB,KAAKC,EAAcgB,EAAdhB,UAAUkB,EAAIF,EAAJE,GAClC,OAAQD,GAAgBlB,GAAQC,GAAakB,IAAO,SAACrB,EAAD,CAEhDC,OAAQmB,EACRlB,KAAMA,EACNC,UAAWA,GAHNkB","sources":["Service/API.js","js/ScrollBy.js","components/CastItemCard/CastItemCard.styled.js","components/CastItemCard/CastItemCard.jsx","pages/SelectedMovie/CastList/Cast.styled.js","pages/SelectedMovie/CastList/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\nconst API_KEY='3a3d464bfa5c4e0090fb8ce329cb5fcf';\nconst BASE_URL='https://api.themoviedb.org/3';\naxios.defaults.baseURL=BASE_URL;\n\nexport const fetchTrendingMovies=async()=>{\n    const {data}= await axios.get(`/trending/movie/day?api_key=${API_KEY}`)\n    return data\n}\n\nexport const fetchMovieById=async(movieId)=>{\n    const {data}= await axios.get(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n    return data\n}\n\nexport const fetchMovieCast=async(movieId)=>{\n    const {data}= await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n    return data\n}\n\nexport const fetchReviewMovie=async(movieId)=>{\n    const {data}= await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`)\n    return data\n}\n\nexport const fetchSearchMovie=async(searchParams)=>{\n    const{data}=await axios.get(`/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&${searchParams}`)\n    return data\n}","export const getScroll=()=>{\n    window.scrollBy({\n        top: 200,\n        left: 0,\n        behavior: 'smooth',\n    });\n}","import styled from \"styled-components\";\n\nexport const CastItem=styled.li`\nwidth:10%;\nmargin: 10px 0;\nmargin-right: 10px;\nborder: 1px solid grey;\nborder-radius:8px;\n`\n\nexport const ContainerAbout=styled.div`\nwidth:100%;\npadding:3px;\n`\n\nexport const ImageActor=styled.img`\nmax-width:100%;\nborder-radius: 8px 8px 0 0 ;\n`\n\nexport const AboutActor=styled.p`\nfont-size:12px;\n`","import PropTypes from 'prop-types';\nimport { ImageActor,AboutActor, CastItem,ContainerAbout } from \"./CastItemCard.styled\"\n\nexport const CastItemCard=({poster,name,character})=>{\n    console.log(poster)\n    console.log(name)\n    console.log(character)\n    return( <CastItem><ImageActor src={`https://image.tmdb.org/t/p/w500${poster}`} alt={name}/>\n    <ContainerAbout><AboutActor>{name}</AboutActor>\n    <AboutActor>Character: {character}</AboutActor></ContainerAbout></CastItem>)\n}\n\nCastItemCard.propTypes={\n    poster:PropTypes.string,\n    name:PropTypes.string.isRequired,\n    character:PropTypes.string.isRequired,\n}","import styled from \"styled-components\";\n\nexport const CastList=styled.ul`\ndisplay:flex;\njustify-content:center;\nflex-wrap:wrap;\nlist-style:none;\nmargin-right:-10px;\n`\n\n\n\n","import { notifyError } from 'js/ToastNotify';\nimport {useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as MoviesService from 'Service/API';\nimport { CastItemCard } from \"components/CastItemCard/CastItemCard\";\nimport { CastList} from \"./Cast.styled\";\nimport {getScroll}  from \"js/ScrollBy\";\n\nconst Cast=()=>{\n    const[credits,setCredits]=useState([])\n\n    let {movieId}=useParams();\n\n    useEffect(()=>{\n        const getCast=async(movieId)=>{\n        try{\n            const {cast}= await MoviesService.fetchMovieCast(movieId)\n            setCredits([...cast])\n            \n        }\n            catch {notifyError()}\n            return ()=>{setCredits([])}\n        }\n        getCast(movieId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n        },[])\n\n        useEffect(()=>getScroll(),[credits])\n    return(<CastList>\n        {credits.map(actor=>{\n            const{profile_path,name,character,id}=actor;\n            return( profile_path && name && character && id && (<CastItemCard\n                key={id}\n                poster={profile_path}\n                name={name}\n                character={character}\n                />)\n                )})}\n        </CastList>)\n}\n\nexport default Cast"],"names":["API_KEY","axios","fetchTrendingMovies","data","fetchMovieById","movieId","fetchMovieCast","fetchReviewMovie","fetchSearchMovie","searchParams","getScroll","window","scrollBy","top","left","behavior","CastItem","styled","ContainerAbout","ImageActor","AboutActor","CastItemCard","poster","name","character","console","log","src","alt","CastList","useState","credits","setCredits","useParams","useEffect","getCast","MoviesService","cast","notifyError","map","actor","profile_path","id"],"sourceRoot":""}